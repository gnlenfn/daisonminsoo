name: CI/CD
env:
  DOCKER_REGISTRY: ghcr.io/gnlenfn/egomoya

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      docker-image-tag: ${{ steps.set-output-docker-image-tag.outputs.OUTPUT_DOCKER_IMAGE_TAG }}
    steps:
      # SOURCE 단계 - 저장소 Checkout
      - name: Checkout-source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring boot application 빌드
      - name: Build with gradle
        run: |
          ./gradlew clean 
          ./gradlew build -x test
        

      - name: Set Seoul timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Asia/Seoul"

      # GitHub Container Registry 로그인
      - name: Login GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GHCR_TOKEN}}

      - name: Create Docker Image Tag
        run: |
          echo "DOCKER_IMAGE_TAG=$(date +%Y%m%d-%H%M%S)_$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Set Docker Image Tag
        id: set-output-docker-image-tag
        run: |
          echo "OUTPUT_DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT

      # docker image build & push
      - name: Build Docker image
        run: |
          docker build --build-arg VERSION=$DOCKER_IMAGE_TAG -t $DOCKER_REGISTRY:$DOCKER_IMAGE_TAG .      

      - name: Push to Github Container Registry
        run: |
          docker push $DOCKER_REGISTRY:$DOCKER_IMAGE_TAG

  deploy-ncp:
    runs-on: ubuntu-latest
    needs: [ build-app ]
    steps:
      - name: Connect to NCP & Execute Application
        env:
          DOCKER_IMAGE_TAG: ${{ needs.build-app.outputs.docker-image-tag }}
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_SSH_KEY }}
          port: ${{ secrets.NCP_SSH_PORT }}
          script: |
            docker stop backend
            docker rm backend
            docker pull ${{ env.DOCKER_REGISTRY }}:${{ env.DOCKER_IMAGE_TAG }}
            docker run -d -p 8080:8080 --name backend ${{ env.DOCKER_REGISTRY }}:${{ env.DOCKER_IMAGE_TAG }}
